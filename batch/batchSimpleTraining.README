
'''
usage: batchSimpleTraining.py [-h] [-k NFOLD] [-o OUTPUT_NAME]
                              [-e EMOTION_IDS] [-c C] [-g GAMMA]
                              [-s SCORE_DIR] [-v] [-d]
                              feature_list_file

perform SVM training for LJ40K

positional arguments:
  feature_list_file     This program will fuse the features listed in this
                        file and feed all of them to the classifier. The file
                        format is in JSON. See "feautre_list_ex.json" for
                        example

optional arguments:
  -h, --help            show this help message and exit
  -k NFOLD, --kfold NFOLD
                        k for kfold cross-validtion. If the value less than 2,
                        we skip the cross-validation and choose the first
                        parameter of -c and -g (DEFAULT: 10)
  -o OUTPUT_NAME, --output_file_name OUTPUT_NAME
                        path to the output file in csv format (DEFAULT:
                        out.csv)
  -e EMOTION_IDS, --emotion_ids EMOTION_IDS
                        a list that contains emotion ids ranged from 0-39
                        (DEFAULT: 0). This can be a range expression, e.g.,
                        3-6,7,8,10-15
  -c C                  SVM parameter (DEFAULT: 1). This can be a list
                        expression, e.g., 0.1,1,10,100
  -g GAMMA, --gamma GAMMA
                        RBF parameter (DEFAULT: 1/dimensions). This can be a
                        list expression, e.g., 0.1,1,10,100
  -s SCORE_DIR, --output_misc_dir SCORE_DIR
                        output intermediate data of each emotion in the
                        specified directory (DEFAULT: not output)
  -v, --verbose         show messages
  -d, --debug           show debug messages

notes:
    1. feature_list_file should look like this:
        [
            {
                "feature": "TFIDF_TSVD",
                "training": "adir/bdir/TFIDF_TSVD.train.npz",
                "testing": "cdir/ddir/TFIDF_TSVD.test.npz"
            },
            {
                "feature": "keyword",
                "training": "adir/bdir/keyword.train.npz",
                "testing": "cdir/ddir/keyword.test.npz"
            }
        ]

    2. Use example:
        python batchSimpleTraining.py -k 10 -e 0-39 -o output.csv -c 1,10,100,1000 -v feature_list_ex.json
        python batchSimpleTraining.py -k 10 -e 0-39 -o output.csv -c 10,30,70,100,300,700,1000 -g 0.0001,0.0003,0.001,0.003,0.01,0.1 TFIDF_TSVD300.json
'''